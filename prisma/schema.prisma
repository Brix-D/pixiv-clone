datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  password      String?         @db.Text
  image         String?
  Session       Session[]
  Account       Account?
  Albums        Album[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model Album {
  id        String @id @default(cuid())
  userId    String
  name      String
  isPrivate Boolean? @default(false)
  user      User @relation(fields: [userId], references: [id])
  images    Image[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id          String @id @default(cuid())
  albumId     String
  isPrivate   Boolean? @default(false)
  isNsfw      Boolean? @default(false)

  album       Album? @relation(fields: [albumId], references: [id])
  fileAssets  FileAsset[] @relation("ImageFileAsset")
  tags        Tag[]
}

enum ModelWithFileAsset {
  Image
}

model FileAsset {
  id          String @id @default(cuid())
  name        String @db.Text
  mimeType    String
  size        Float
  extension   String

  modelType   ModelWithFileAsset
  modelId     String

  image       Image? @relation("ImageFileAsset", fields: [modelId], references: [id], map: "image_modelId")
}

model Tag {
  id          String @id @default(cuid())
  name        String
  color       String
  images      Image[]
}